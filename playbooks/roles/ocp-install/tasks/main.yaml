---
# tasks file for ocp4 install

- name: mkdir ~/.kube
  file:
    path: ~/.kube
    state: directory

- name: Install kubeconfig
  copy:
    src: "{{ workdir }}/auth/kubeconfig"
    dest: "~/.kube/config"

- name: Update a certificate if required
  shell: |
    hostname=`hostname`
    DOMAIN=${hostname%"-bastion-0.ibm.com"}

    # check if the cluster is more than 24 hrs old
    if ( type -P oc ); then 
      # get the cluster create time in seconds
      oc get -o json clusterversion version > /tmp/test.$$ 2> /dev/null
      tmstmp_str=$(cat /tmp/test.$$ | jq -r '.metadata.creationTimestamp')
      tmstmp=`date -d$tmstmp_str +%s`
  
      # if the cluster time greater than 24 hrs then update the ecrtificate
      if (( $tmstmp  + 86400 < `date +%s` )); then

        #preserve the timestamp of the file
        echo "create a new certificate"
        if [ ! -f openstack-upi/.worker.ign.backup ]; then
          cp -p openstack-upi/worker.ign openstack-upi/.worker.ign.backup
        fi

        # update the tls certificate in the worker ignition file
        URL=api-int.${DOMAIN}
        MCS=api-int.${DOMAIN}:22623

        echo "q"                                                        | \
        openssl s_client -connect $MCS  -showcerts                      | \
        awk '/-----BEGIN CERTIFICATE-----/,/-----END CERTIFICATE-----/' | \
        base64 --wrap=0                                                 | \
        tee api-int.base64 && sed --regexp-extended --in-place=.backup "s%base64,[^,]+%base64,$(cat api-int.base64)\"%" openstack-upi/worker.ign
    
        # Copy Ignition Files to HTTP server
        cp openstack-upi/worker.ign /var/www/html/ignition
        chmod 777 /var/www/html/ignition/*.ign
      fi
    fi

- name: total workers to be instantiated
  shell: cat /etc/dhcp/dhcpd.conf | grep worker | wc -l | tr -d ' '
  register: total_count_str

- set_fact:
    total_count={{ total_count_str.stdout }}

- debug: 
    msg: "worker_count is {{ worker_count }}"
         
- debug: 
    msg: "total_count is {{ total_count }}"
  
    
# Run approve command till we have all workers ready. 'xargs -r ' is used to ignore empty stdin.
- name: Approve Worker CSRs
  shell: |
    oc get csr -ojson | jq -r '.items[] | select(.status == {} ) | .metadata.name' | xargs -r oc adm certificate approve
  until: lookup('pipe','oc get nodes | grep -w worker | grep -w Ready | grep  -v "NotReady" |wc -l') == total_count
  retries: 30
  delay: 60
  when: total_count|int > 0

- name: Wait for install-complete
  shell: "openshift-install wait-for install-complete --log-level {{ log_level }}"
  args:
    chdir: "{{ workdir }}"

- name: Configure nfs-provisioner
  shell: helpernodecheck nfs-setup
  when: storage_type == "nfs"

# The image-registry is not always available immediately after the OCP installer
- name: Wait for image-registry operator
  shell: "oc get configs.imageregistry.operator.openshift.io/cluster --no-headers | wc -l"
  register: imgreg_operator_count
  until: imgreg_operator_count.stdout|int > 0
  retries: 20
  delay: 30

- name: Create and patch image-registry operator as registry-pvc
  tags: image-registry
  shell: |
    oc create -f /usr/local/src/registry-pvc.yaml -n openshift-image-registry
    oc patch configs.imageregistry.operator.openshift.io cluster --type merge --patch '{"spec":{"storage":{"pvc":{ "claim": "registry-pvc"}}, "managementState": "Managed"}}'
  when: storage_type == "nfs"

- name: Patch image-registry operator as emptyDir
  tags: image-registry
  shell: |
    oc patch configs.imageregistry.operator.openshift.io cluster --type merge --patch '{"spec":{"storage":{"emptyDir":{}}, "managementState": "Managed"}}'
  when: storage_type != "nfs"

- name: Force install kubeconfig again
  copy:
    src: "{{ workdir }}/auth/kubeconfig"
    dest: "~/.kube/config"
    force: yes
